CONTEXT: FILE: fastapi_server/api/toolkit/tools/plant_care_tool.py
BRANCH: 06-chapter__backend-frontend-retrospective

# File: tools/plant_care_advisor.py

import requests
from openai.types.chat import ChatCompletionToolParam
from pydantic import BaseModel, Field
from toolkit.tools.tool_types import ToolProtocol


class PlantCareInput(BaseModel):
    latitude: float = Field(..., description="Latitude of the location")
    longitude: float = Field(..., description="Longitude of the location")


class PlantCareAdvisorTool(ToolProtocol):
    @property
    def name(self) -> str:
        return "plant_care_advisor"

    @property
    def description(self) -> str:
        return "Get plant care suggestions based on local weather conditions like temperature, rainfall, and humidity."

    def tool_spec(self) -> ChatCompletionToolParam:
        return ChatCompletionToolParam(
            type="function",
            function={
                "name": self.name,
                "description": self.description,
                "parameters": PlantCareInput.model_json_schema(),
            },
        )

    def tool_intent_prompt(self) -> str:
        return ""

    def tool_system_prompt(self) -> str:
        return (
            "You are a weather assistant. You will recieve a city name "
            "and must return the current plant conditions using the `plant_care_advisor` tool. "
        )

    def execute(self, input_data: PlantCareInput) -> str:
        lat, lon = input_data.latitude, input_data.longitude
        url = (
            f"https://api.open-meteo.com/v1/forecast"
            f"?latitude={lat}&longitude={lon}"
            f"&current=temperature_2m,relative_humidity_2m,precipitation"
            f"&timezone=auto"
        )

        try:
            res = requests.get(url, timeout=5)
            res.raise_for_status()
            data = res.json()

            temp = data["current"]["temperature_2m"]
            humidity = data["current"]["relative_humidity_2m"]
            rain = data["current"]["precipitation"]

            from typing import List

            messages: List[str] = [
                f"Current temperature: {temp}°C, Humidity: {humidity}%, Rainfall: {rain}mm. \n"
            ]

            if temp < 5:
                messages.append(
                    "⚠️ Frost risk! Bring potted plants indoors or cover delicate crops."
                )
            elif temp > 30:
                messages.append(
                    "☀️ High heat — water early morning or late evening to reduce evaporation."
                )
            else:
                messages.append("🌤️ Mild temperatures — good conditions for most outdoor plants.")

            if rain > 2:
                messages.append("🌧️ Rainfall is sufficient today — skip watering.")
            elif humidity < 30:
                messages.append("💧 Very dry air — consider misting or increased watering.")
            else:
                messages.append("🪴 Moderate humidity — maintain your normal watering schedule.")

            return " ".join(messages)

        except Exception as e:
            return f"Failed to retrieve plant care data: {str(e)}"

    def run_from_json(self, raw_json: str) -> str:
        return self.execute(PlantCareInput.model_validate_json(raw_json))

    def validate_tool_call(self, raw_json: str) -> bool:
        try:
            PlantCareInput.model_validate_json(raw_json)
            return True
        except Exception:
            return False
